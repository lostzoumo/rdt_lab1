!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSERT	rdt_struct.h	12;"	d
CCFLAGS	Makefile	/^CCFLAGS = -Wall -g -rdynamic$/;"	m
EVENT_RECEIVER_FROMLOWERLAYER	rdt_sim.cc	/^		EVENT_SENDER_TIMEOUT, EVENT_RECEIVER_FROMLOWERLAYER};$/;"	e	enum:__anon1	file:
EVENT_SENDER_FROMLOWERLAYER	rdt_sim.cc	/^enum {EVENT_SENDER_FROMUPPERLAYER=0, EVENT_SENDER_FROMLOWERLAYER, $/;"	e	enum:__anon1	file:
EVENT_SENDER_FROMUPPERLAYER	rdt_sim.cc	/^enum {EVENT_SENDER_FROMUPPERLAYER=0, EVENT_SENDER_FROMLOWERLAYER, $/;"	e	enum:__anon1	file:
EVENT_SENDER_TIMEOUT	rdt_sim.cc	/^		EVENT_SENDER_TIMEOUT, EVENT_RECEIVER_FROMLOWERLAYER};$/;"	e	enum:__anon1	file:
Event	rdt_sim.cc	/^				Event() { next = NULL; }$/;"	f	class:Event
Event	rdt_sim.cc	/^class Event$/;"	c	file:
EventChain	rdt_sim.cc	/^				EventChain() {$/;"	f	class:EventChain
EventChain	rdt_sim.cc	/^class EventChain$/;"	c	file:
EventReceiverFromLowerLayer	rdt_sim.cc	/^				EventReceiverFromLowerLayer() { event_type = EVENT_RECEIVER_FROMLOWERLAYER; }$/;"	f	class:EventReceiverFromLowerLayer
EventReceiverFromLowerLayer	rdt_sim.cc	/^class EventReceiverFromLowerLayer : public Event$/;"	c	file:
EventSenderFromLowerLayer	rdt_sim.cc	/^				EventSenderFromLowerLayer() { event_type = EVENT_SENDER_FROMLOWERLAYER; }$/;"	f	class:EventSenderFromLowerLayer
EventSenderFromLowerLayer	rdt_sim.cc	/^class EventSenderFromLowerLayer : public Event$/;"	c	file:
EventSenderFromUpperLayer	rdt_sim.cc	/^				EventSenderFromUpperLayer() { event_type = EVENT_SENDER_FROMUPPERLAYER; }$/;"	f	class:EventSenderFromUpperLayer
EventSenderFromUpperLayer	rdt_sim.cc	/^class EventSenderFromUpperLayer : public Event$/;"	c	file:
EventSenderTimeout	rdt_sim.cc	/^				EventSenderTimeout() { event_type = EVENT_SENDER_TIMEOUT; }$/;"	f	class:EventSenderTimeout
EventSenderTimeout	rdt_sim.cc	/^class EventSenderTimeout : public Event$/;"	c	file:
GetSimulationTime	rdt_sim.cc	/^double GetSimulationTime()$/;"	f
LDFLAGS	Makefile	/^LDFLAGS = -Wall -g -rdynamic$/;"	m
RDT_PKTSIZE	rdt_struct.h	27;"	d
Receiver_Final	rdt_receiver.cc	/^void Receiver_Final()$/;"	f
Receiver_FromLowerLayer	rdt_receiver.cc	/^void Receiver_FromLowerLayer(struct packet *pkt)$/;"	f
Receiver_Init	rdt_receiver.cc	/^void Receiver_Init()$/;"	f
Receiver_MergePkt	rdt_receiver.cc	/^void Receiver_MergePkt(struct mypacket *mpkt)$/;"	f
Receiver_ToLowerLayer	rdt_sim.cc	/^void Receiver_ToLowerLayer(struct packet *pkt)$/;"	f
Receiver_ToUpperLayer	rdt_sim.cc	/^void Receiver_ToUpperLayer(struct message *msg)$/;"	f
Sender_Final	rdt_sender.cc	/^void Sender_Final()$/;"	f
Sender_FromLowerLayer	rdt_sender.cc	/^void Sender_FromLowerLayer(struct packet *pkt)$/;"	f
Sender_FromUpperLayer	rdt_sender.cc	/^void Sender_FromUpperLayer(struct message *msg)$/;"	f
Sender_Init	rdt_sender.cc	/^void Sender_Init()$/;"	f
Sender_StartTimer	rdt_sim.cc	/^void Sender_StartTimer(double timeout)$/;"	f
Sender_StopTimer	rdt_sim.cc	/^void Sender_StopTimer()$/;"	f
Sender_Timeout	rdt_sender.cc	/^void Sender_Timeout()$/;"	f
Sender_ToLowerLayer	rdt_sim.cc	/^void Sender_ToLowerLayer(struct packet *pkt)$/;"	f
Sender_isTimerSet	rdt_sim.cc	/^bool Sender_isTimerSet()$/;"	f
TARGETS	Makefile	/^TARGETS = rdt_sim $/;"	m
_RDT_RECEIVER_H_	rdt_receiver.h	9;"	d
_RDT_SENDER_H_	rdt_sender.h	9;"	d
_RDT_STRUCT_H_	rdt_struct.h	9;"	d
ack	rdt_receiver.cc	/^unsigned int ack(int *vec,int num)$/;"	f
bucket	rdt_receiver.cc	/^struct message * bucket[window];$/;"	v	typeref:struct:message
cancel	rdt_sim.cc	/^				void cancel(Event *e) {$/;"	f	class:EventChain
check	checksum.cc	/^bool check(struct packet *pkt){$/;"	f
checksum	checksum.cc	/^void checksum(struct packet *pkt){$/;"	f
checksum_8	checksum.cc	/^unsigned int checksum_8(unsigned int cksum, char *data,unsigned int size){$/;"	f
checksum_even	checksum.cc	/^char checksum_even(char *pkt)$/;"	f
checksum_odd	checksum.cc	/^char checksum_odd(char *pkt)$/;"	f
corrupt_rate	rdt_sim.cc	/^double corrupt_rate;$/;"	v
data	rdt_receiver.cc	/^		char data[RDT_PKTSIZE-header_size];$/;"	m	struct:mypacket	file:
data	rdt_struct.h	/^    char *data;$/;"	m	struct:message
data	rdt_struct.h	/^    char data[RDT_PKTSIZE];$/;"	m	struct:packet
event_type	rdt_sim.cc	/^				int event_type;         \/* application-specific event type *\/$/;"	m	class:Event	file:
free_msg	rdt_sim.cc	/^static void free_msg(struct message *msg)$/;"	f	file:
generate_msg	rdt_sim.cc	/^static struct message *generate_msg()$/;"	f	file:
glcnt	rdt_sender.cc	/^		int glcnt;$/;"	m	struct:timer	file:
globalcnt	rdt_receiver.cc	/^		int globalcnt;$/;"	m	struct:mypacket	file:
globalcnt	rdt_sender.cc	/^		int globalcnt;$/;"	m	struct:mypacket	file:
globalcnt	rdt_sender.cc	/^unsigned int globalcnt=1;$/;"	v
head	rdt_sim.cc	/^				Event *head;            \/* head event in the chain *\/$/;"	m	class:EventChain	file:
header_size	rdt_receiver.cc	29;"	d	file:
lam	rdt_receiver.cc	/^int lam=lmr+window;\/\/last acceptable message$/;"	v
lar	rdt_sender.cc	/^int lar=-1;$/;"	v
lmr	rdt_receiver.cc	/^int lmr=-1;\/\/last message received$/;"	v
loss_rate	rdt_sim.cc	/^double loss_rate;$/;"	v
lpr	rdt_receiver.cc	/^int lpr=0;\/\/last packet received$/;"	v
main	rdt_sim.cc	/^int main(int argc, char *argv[])$/;"	f
mark	rdt_receiver.cc	/^int mark[window][20];$/;"	v
maxpayload_size	rdt_receiver.cc	/^int maxpayload_size=RDT_PKTSIZE-header_size;$/;"	v
message	rdt_struct.h	/^struct message {$/;"	s
message_verfication_passed	rdt_sim.cc	/^bool message_verfication_passed = true;$/;"	v
msg_arrivalint	rdt_sim.cc	/^double msg_arrivalint;$/;"	v
msg_size	rdt_sim.cc	/^int msg_size;$/;"	v
msgnum	rdt_receiver.cc	/^		unsigned char msgnum;$/;"	m	struct:mypacket	file:
mypacket	rdt_receiver.cc	/^struct mypacket{$/;"	s	file:
mypacket	rdt_sender.cc	/^struct mypacket{$/;"	s	file:
myrandom	rdt_sim.cc	/^static double myrandom()$/;"	f	file:
next	rdt_sim.cc	/^				class Event *next;      \/* next event in the chain *\/$/;"	m	class:Event	typeref:class:Event::Event	file:
next_event	rdt_sim.cc	/^				Event *next_event() {$/;"	f	class:EventChain
outoforder_rate	rdt_sim.cc	/^double outoforder_rate;$/;"	v
packet	rdt_struct.h	/^struct packet {$/;"	s
payload_size	rdt_receiver.cc	/^		int payload_size;$/;"	m	struct:mypacket	file:
pkt	rdt_sender.cc	/^		packet *pkt;$/;"	m	struct:mypacket	file:
pkt	rdt_sim.cc	/^				struct packet pkt;$/;"	m	class:EventReceiverFromLowerLayer	typeref:struct:EventReceiverFromLowerLayer::packet	file:
pkt	rdt_sim.cc	/^				struct packet pkt;$/;"	m	class:EventSenderFromLowerLayer	typeref:struct:EventSenderFromLowerLayer::packet	file:
pktFormat	rdt_receiver.cc	/^void pktFormat(struct packet *pkt,struct mypacket *mpkt)$/;"	f
pkt_latency	rdt_sim.cc	/^const double pkt_latency = 0.1;$/;"	v
pktnum	rdt_sender.cc	/^		int pktnum;$/;"	m	struct:timer	file:
rcor	rdt_receiver.cc	/^FILE *rcor;$/;"	v
recbuf	rdt_receiver.cc	/^int recbuf[window];$/;"	v
rstruc	rdt_receiver.cc	/^FILE *rstruc;$/;"	v
sched_time	rdt_sim.cc	/^				double sched_time;      \/* scheduled occuring time *\/$/;"	m	class:Event	file:
schedule	rdt_sim.cc	/^				void schedule(Event *e) {$/;"	f	class:EventChain
scor	rdt_sender.cc	/^FILE *scor;$/;"	v
sendbuf	rdt_sender.cc	/^struct mypacket* sendbuf[window];$/;"	v	typeref:struct:mypacket
sender_timer	rdt_sim.cc	/^Event *sender_timer = NULL;$/;"	v
seqnum	rdt_receiver.cc	/^		int seqnum;$/;"	m	struct:mypacket	file:
sheader_size	rdt_sender.cc	/^int sheader_size=12;$/;"	v
sim_core	rdt_sim.cc	/^EventChain sim_core;$/;"	v
sim_time	rdt_sim.cc	/^				double sim_time;        \/* simulation time *\/$/;"	m	class:EventChain	file:
sim_time	rdt_sim.cc	/^double sim_time;$/;"	v
size	rdt_struct.h	/^    int size;$/;"	m	struct:message
slog	rdt_sender.cc	/^FILE *slog;$/;"	v
slpr	rdt_sender.cc	/^int slpr=0;$/;"	v
smaxpayload_size	rdt_sender.cc	/^int smaxpayload_size=RDT_PKTSIZE - sheader_size;$/;"	v
time	rdt_sender.cc	/^		double time;$/;"	m	struct:timer	file:
time	rdt_sim.cc	/^				double time() { return sim_time; }$/;"	f	class:EventChain
timelog	rdt_sender.cc	/^FILE *timelog;$/;"	v
timeout	rdt_sender.cc	26;"	d	file:
timer	rdt_sender.cc	/^struct timer{$/;"	s	file:
timerlist	rdt_sender.cc	/^struct timer* timerlist[timerwindow+1];$/;"	v	typeref:struct:timer
timersize	rdt_sender.cc	/^int timersize=0;$/;"	v
timerwindow	rdt_sender.cc	25;"	d	file:
tot	rdt_receiver.cc	/^		int tot;$/;"	m	struct:mypacket	file:
tot_chars_delivered	rdt_sim.cc	/^int tot_chars_delivered = 0;$/;"	v
tot_chars_sent	rdt_sim.cc	/^int tot_chars_sent = 0;$/;"	v
tot_pkts_passed	rdt_sim.cc	/^int tot_pkts_passed = 0;$/;"	v
tracing_level	rdt_sim.cc	/^int tracing_level;$/;"	v
ver	rdt_sim.cc	/^FILE *ver;$/;"	v
window	rdt_receiver.cc	40;"	d	file:
window	rdt_sender.cc	24;"	d	file:
